# Auto detect text files and perform LF normalization
* text=auto
library(quantmod)
library(lattice)
library(timeSeries)
library(rugarch)

getSymbols("^GSPC", from="1950-01-01")
spReturns = diff(log(Cl(GSPC)))
spReturns[as.character(head(index(Cl(GSPC)),1))] = 0

windowLength = 500
foreLength = length(spReturns) - windowLength
forecasts <- vector(mode="character", length=foreLength)

for (d in 0:foreLength) {
  spReturnsOffset = spReturns[(1+d):(windowLength+d)]
  final.aic <- Inf
  final.order <- c(0,0,0)
  for (p in 0:5) for (q in 0:5) {
      if ( p == 0 && q == 0) {
          next
      }
     
      arimaFit = tryCatch( arima(spReturnsOffset, order=c(p, 0, q)),
                           error=function( err ) FALSE,
                           warning=function( err ) FALSE )
      if( !is.logical( arimaFit ) ) {
        current.aic <- AIC(arimaFit)
        if (current.aic < final.aic) {
            final.aic <- current.aic
            final.order <- c(p, 0, q)
            final.arima <- arima(spReturnsOffset, order=final.order)
        }
    } else {
        next
    }
  }
  spec = ugarchspec(
              variance.model=list(garchOrder=c(1,1)),
              mean.model=list(
                  armaOrder=c(
                    final.order[1],
                    final.order[3]
                ), include.mean=T
            ),
            distribution.model="sged")
  
  fit = tryCatch(
    ugarchfit(
      spec, spReturnsOffset, solver = "hybrid"
    ), error=function(e) e, warning=function(w) w
  )  
  
  if(is(fit, "warning")) {
    forecasts[d+1] = paste(
      index(spReturnsOffset[windowLength]), 1, sep=","
    )  
       print(
         paste(
           index(spReturnsOffset[windowLength]), 1, sep=","
         )
       )
     } else {
       fore = ugarchforecast(fit, n.ahead=1)
       ind = fore@forecast$seriesFor
       forecasts[d+1] = paste(
         colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=","
       )
       print(
         paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=",")
       )     
         
    }
}

  
